name: Build and Package Binary

on:
  schedule:
    # Runs at 11 PM EST daily
    - cron: '0 3 * * *'  # Note: 11 PM EST is 4 AM UTC
  workflow_dispatch:
jobs:
  windows-build:
    name: Windows build
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set game version
      run: echo $(date +'%Y.%m.%d') > data/.version
    - name: Set game edition
      run: echo 1 > data/.edition

    - name: Set up Python 3
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pygame tweener requests
    - name: Build with PyInstaller
      run: |
        pyinstaller --hidden-import=pygame --hidden-import=tweener --onefile --name qlute --add-data "data:data" launcher.py
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Windows-Qlute
        path: ./dist
  linux-build:
    name: Linux build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set game version
      run: echo $(date +'%Y.%m.%d') > data/.version
    - name: Set game edition
      run: echo 1 > data/.edition
    - name: Check for commits today
      id: check_commits
      run: |
          # Get the date in UTC
          current_date=$(date -u +"%Y-%m-%d")
          
          # Get the list of commits made today
          commits=$(git log --since="$current_date 00:00:00" --until="$current_date 23:59:59" --format='%H')
          
          # Fail the job if no commits are found
          if [ -z "$commits" ]; then
            echo "No commits found for today."
            exit 1
          else
            echo "Commits found for today."
          fi
    - name: Set up Python 3
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller pygame tweener requests
    - name: Build with PyInstaller
      run: |
        pyinstaller --hidden-import=pygame --hidden-import=tweener --onefile --name qlute --add-data "data:data" launcher.py
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Linux-Qlute
        path: ./dist
  Release:
    name: Create Game Release
    runs-on: ubuntu-latest
    needs: [linux-build, windows-build]
    if: ${{ needs.windows-build.result == 'success' && needs.windows-build.result == 'success' }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set RELEASE
      run: echo $(date +'%Y.%m.%d') > RELEASE
    - name: Download de artifacts
      uses: actions/download-artifact@v4
      with:
          name: Linux-Qlute
    - uses: actions/download-artifact@v4
      with:
          name: Windows-Qlute
    - name: Get current date for Release
      id: date
      run: echo "::set-output name=date::$(date +'%Y.%m.%d')"
    - name: Make changelog
      run: |
       current_date=$(date -u +"%Y-%m-%d")
       echo "# What's Changed">CHANGELOG.md
       git log --since="$current_date 00:00:00" --until="$current_date 23:59:59" --format='### %h : %s (By @%cn)' >>CHANGELOG.md
    - name: release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: ${{ steps.date.outputs.date }}
        tag_name: ${{ steps.date.outputs.date }} 
        body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: upload linux artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: qlute
        asset_name: qlute
        asset_content_type: application/octet-stream
    - name: upload windows artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: qlute.exe
        asset_name: qlute.exe
        asset_content_type: application/octet-stream
    - name: upload RELEASE
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: RELEASE
        asset_name: RELEASE
        asset_content_type: application/octet-stream
